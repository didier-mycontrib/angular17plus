import { ClassHelper } from "./class-helper";
import { FieldHelper } from "./field-helper";

export interface ObjectHelper<T,I>{
    buildEmptyObject() :T; //to code as return new T();
    getId(obj:T):I; //return id/pk of obj
    classHelper:ClassHelper
    getFieldHelper(fieldName:string):FieldHelper|null;
    objectEssentialValuesArray(obj:object):any[];
    extractKeyValueString(obj:any):string;  // as keyName=keyValue
}

export abstract class AbstractObjectHelper<T,I> implements ObjectHelper<T,I>{
    classHelper :ClassHelper ;

    constructor(entityName :string, 
                withAutoGeneratedId :boolean =true, 
                idKeyName :string ="id",){
                    this.classHelper = new ClassHelper(entityName,withAutoGeneratedId,idKeyName);
                    this.initObjectHelper();
                }
    abstract buildEmptyObject(): T ; //build new instance with default/empty constructor
    abstract getId(obj: T): I; //return value of pk/id par of entity
    abstract initObjectHelper():void; //init classHelper.essentialFieldNames and classHelper.fieldHelperMap

    getFieldHelper(fieldName:string):FieldHelper|null{
        return this.classHelper.fieldHelperMap.get(fieldName)??null;
    }   
    
  
   objectEssentialValuesArray(obj:object):any[]{
        let arrayOfPropKeys = this.classHelper.essentialFieldNames
        let valuesArray = [];
        for(let key of arrayOfPropKeys){
        valuesArray.push(Reflect.get(obj,key));
        }
        return valuesArray;
   }


  extractKeyValueString(obj:any){
    let keyValue = obj[this.classHelper.idKeyName];
    return `${this.classHelper.idKeyName}=${keyValue}`;
  }
}